;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Copyright (c) 2017, 2017 IBM Corp. and others
;;
;; This program and the accompanying materials are made available under
;; the terms of the Eclipse Public License 2.0 which accompanies this
;; distribution and is available at http://eclipse.org/legal/epl-2.0
;; or the Apache License, Version 2.0 which accompanies this distribution
;; and is available at https://www.apache.org/licenses/LICENSE-2.0.
;;
;; This Source Code may also be made available under the following Secondary
;; Licenses when the conditions for such availability set forth in the
;; Eclipse Public License, v. 2.0 are satisfied: GNU General Public License,
;; version 2 with the GNU Classpath Exception [1] and GNU General Public
;; License, version 2 with the OpenJDK Assembly Exception [2].
;;
;; [1] https://www.gnu.org/software/classpath/license.html
;; [2] http://openjdk.java.net/legal/assembly-exception.html
;;
;; SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; This file defines a method to compute values in the Mandelbrot set. It takes
; as arguments:
; 
; 1. The number of iterations to be done as a 32-bit integer
; 2. The number of rows/colomns that in the output table as an 32-bit integer
; 3. A pointer to the output table as a pointer to a 32-bit integer
;
; The function does not return anything.
;
; With the given parameters, it fills the output table with the values from the
; calculation. The resulting table can be used to generate a graph of the
; Mandelbrot set (e.g. by letting each table cell represent a point on the graph). 

(method name="mandelbrot" return="NoType" args=["Int32", "Int32", "Address"]
   (block name="start"                          ; start:
      (istore temp="py"                         ; int py = 0;
         (iconst 0) ) )
   (block name="yloop"                          ; yloop:
      (istore temp="px"                         ; int px = 0;
         (iconst 0) )                           ;
      (ificmpge target="yloop_exit"             ; if (py >= parm1) goto yloop_exit;
         (iload temp="py")
         (iload parm=1) ) )
   (block name="xloop"                          ; xloop:
      (ificmpge target="xloop_exit"             ; if (px >= parm1) goto xloop_exit;
         (iload temp="px")
         (iload parm=1) ) )
   (block name="setup"                          ; setup:
      (dstore temp="x0"                         ; double x0 = px * 3.5 / parm1 - 2.5; // map pixel x-coordinate to Mandelbrot range [-2.5, 1]
         (dsub
            (dmul
               (i2d
                  (iload temp="px") )
               (ddiv
                  (dconst 3.5000)
                  (i2d
                     (iload parm=1 id="setup_iload_parm1") ) ) )
            (dconst 2.5000) ) )
      (dstore temp="y0"                         ; double y0 = py * 2.0 /parm1 - 1; // map pixel y-coordinate to Mandelbrot range [-1, 1]
         (dsub
            (dmul
               (i2d
                  (iload temp="py") )
               (ddiv
                  (dconst 2.0000)
                  (i2d
                     (@id "setup_iload_parm1") ) ) )
            (dconst 1.0000) ) )
      (dstore temp="x"                          ; double x = 0.0;
         (dconst 0.0000 id="setup_dconst_0") )
      (dstore temp="y"                          ; double y = 0.0;
         (@id "setup_dconst_0") )
      (istore temp="iter"                       ; int iter = 0;
         (iconst 0) ) )
   (block name="loop"                           ; loop:
      (istore temp="comp1"                      ; int comp1 = (x*x + y*y) < 4.0;
         (dcmplt
            (dadd
               (dmul
                  (dload temp="x" id="loop_dload_x")
                  (@id "loop_dload_x") )
               (dmul
                  (dload temp="y" id="loop_dload_y")
                  (@id "loop_dload_y") ) )
            (dconst 4.0000) ) )
      (istore temp="comp2"                      ; int comp2 = iter < parm0;
         (icmplt
            (iload temp="iter")
            (iload parm=0) ) )
      (ificmpeq target="loop_exit"              ; if ((comp1 && comp2) == 0) goto loop_exit;
         (iconst 0)
         (iand
            (iload temp="comp1")
            (iload temp="comp2") ) ) )
   (block name="loop_body"                      ; loop_body:
      (dstore temp="xtemp"                      ; double xtemp = x0 + x*x - y*y;
         (dadd
            (dload temp="x0")
            (dsub
               (dmul
                  (dload temp="x" id="loop_body_dload_x")
                  (@id "loop_body_dload_x") )
               (dmul
                  (dload temp="y" id="loop_body_dload_y")
                  (@id "loop_body_dload_y") ) ) ) )
      (dstore temp="y"                          ; y = y0 + 2.0 * x * y;
         (dadd
            (dload temp="y0")
            (dmul
               (dconst 2.0000)
               (dmul
                  (dload temp="x")
                  (dload temp="y") ) ) ) )
      (dstore temp="x"                          ; x = xtemp;
         (dload temp="xtemp" ) )
      (istore temp="iter"                       ; iter += 1;
         (iadd
            (iconst 1)
            (iload temp="iter") ) )
      (goto target="loop") )                    ; goto loop;
   (block name="loop_exit"                      ; loop_exit:
      (astore temp="addr"                       ; int* addr = parm2 + (px + py * parm1); // map pixel to array index
         (aladd
            (aload parm=2)
            (i2l
               (imul
                  (iconst 4)
                  (iadd
                     (iload temp="px")
                     (imul
                        (iload temp="py")
                        (iload parm=1) ) ) ) ) ) )
      (istorei offset=0                         ; *addr = iter;
         (aload temp="addr")
         (iload temp="iter") ) 
      (istore temp="px"                         ; px += 1;
         (iadd
            (iconst 1)
            (iload temp="px") ) )
      (goto target="xloop") )                   ; goto xloop;
   (block name="xloop_exit"                     ; xloop_exit:
      (istore temp="py"                         ; py += 1;
         (iadd
            (iconst 1)
            (iload temp="py") ) )
      (goto target="yloop") )                   ; goto yloop;
   (block name="yloop_exit"                     ; yloop_exit:
      (return) ) )                              ; return;
