// Copyright (c) 2014, 2014 IBM Corp. and others 
// 
// This program and the accompanying materials are made available under 
// the terms of the Eclipse Public License 2.0 which accompanies this 
// distribution and is available at https://www.eclipse.org/legal/epl-2.0/ 
// or the Apache License, Version 2.0 which accompanies this distribution and 
// is available at https://www.apache.org/licenses/LICENSE-2.0. 
//      
// This Source Code may also be made available under the following 
// Secondary Licenses when the conditions for such availability set 
// forth in the Eclipse Public License, v. 2.0 are satisfied: GNU 
// General Public License, version 2 with the GNU Classpath 
// Exception [1] and GNU General Public License, version 2 with the 
// OpenJDK Assembly Exception [2]. 
//    
// [1] https://www.gnu.org/software/classpath/license.html 
// [2] http://openjdk.java.net/legal/assembly-exception.html 
// 
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception 

Executable=omrti
DATFileName=OMRTraceFormat.dat

TraceEntry=Trc_OMRTI_omrtiGetMemoryCategories_Entry Overhead=1 Level=1 Template="GetMemoryCategories max_categories=%d categories_buffer=%p written_count_ptr=%p total_categories_ptr=%p"
TraceExit-Exception=Trc_OMRTI_omrtiGetMemoryCategories_WrongVersion_Exit Overhead=1 Level=1 Template="GetMemoryCategories failing with OMRTI_ERROR_UNSUPPORTED_VERSION: unmatched version %d"
TraceExit-Exception=Trc_OMRTI_omrtiGetMemoryCategories_AllOutputsNull_Exit Overhead=1 Level=1 Template="GetMemoryCategories failing with OMRTI_ERROR_ILLEGAL_ARGUMENT: categories_buffer, written_count_ptr and total_categories_ptr are all NULL."
TraceExit-Exception=Trc_OMRTI_omrtiGetMemoryCategories_NullOutput_Exit Overhead=1 Level=1 Template="GetMemoryCategories failing with OMRTI_ERROR_ILLEGAL_ARGUMENT: no categories_buffer pointer specified. max_categories=%d"
TraceExit-Exception=Trc_OMRTI_omrtiGetMemoryCategories_NullWrittenPtr_Exit Overhead=1 Level=1 Template="GetMemoryCategories failing with OMRTI_ERROR_ILLEGAL_ARGUMENT, categories_buffer & max_categories are set, but written_count_ptr is NULL. max_categories=%d, categories_buffer=%p"
TraceExit-Exception=Trc_OMRTI_omrtiGetMemoryCategories_J9MemAllocFail_Exit Overhead=1 Level=1 Template="GetMemoryCategories failing with OMR_ERROR_INTERNAL, unable to allocate %d bytes for internal categories buffer"
TraceException=Trc_OMRTI_omrtiGetMemoryCategories_BufferOverflow Overhead=1 Level=1 Template="GetMemoryCategories categories_buffer overflowed (output will be truncated, return code will be OMRTI_ERROR_OUT_OF_MEMORY)"
TraceExit=Trc_OMRTI_omrtiGetMemoryCategories_Exit Overhead=1 Level=1 Template="GetMemoryCategories returning %d"

// Parameter is (void *) which corresponds to the method dictionary entry's key
TraceEvent=Trc_OMRPROF_MethodSampleStart      Group=perfmon Overhead=1 Level=5 Test Template="MTH_S: %p"
TraceEvent=Trc_OMRPROF_MethodSampleContinue   Group=perfmon Overhead=1 Level=5 Test Template="MTH_C: %p"

// Parameters are (key, free-form text field)
TraceEvent=Trc_OMRPROF_insertMethodDictionary_success NoEnv Test Overhead=1 Level=3 Template="insertMethodDictionary: %p %s"
TraceEvent=Trc_OMRPROF_insertMethodDictionary_replaceExistingEntry NoEnv Test Overhead=1 Level=3 Template="insertMethodDictionary: replace existing entry %p %s"
TraceException=Trc_OMRPROF_insertMethodDictionary_failed NoEnv Test Overhead=1 Level=3 Template="insertMethodDictionary: failed(rc=%d) %p %s"

TraceEvent=Trc_OMRPROF_methodDictionaryHighWaterMark NoEnv Test Overhead=1 Level=3 Template="methodDictionary highWaterMark=%u bytes (%u entries of %u bytes each, plus %u name bytes)"
